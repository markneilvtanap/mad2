import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_barcode_scanner/flutter_barcode_scanner.dart';
import 'package:gap/gap.dart';

import 'package:intl/intl.dart';
import 'package:quickalert/quickalert.dart';
import 'package:table_calendar/table_calendar.dart';

class LogsScreen extends StatefulWidget {
  LogsScreen({super.key, this.scannedBarCode});

  String? scannedBarCode;
  @override
  State<LogsScreen> createState() => _LogsScreenState();
}

class _LogsScreenState extends State<LogsScreen> {
  @override
  @override
  Widget build(BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;
    final screenHeight = MediaQuery.of(context).size.height;

    //try
    final FirebaseAuth _auth = FirebaseAuth.instance;
    final FirebaseFirestore _firestore = FirebaseFirestore.instance;
    CalendarFormat _calendarFormat = CalendarFormat.month;
    DateTime _focusedDay = DateTime.now();
    DateTime? _selectedDay;
    Map<DateTime, List<dynamic>> _events = {};
    // Future<void> _fetchEvents() async {
    //   final userId = _auth.currentUser!.uid;
    //   final QuerySnapshot query = await _firestore
    //       .collection('logs')
    //       .where('user_id', isEqualTo: userId)
    //       .get();
    //   final List<DocumentSnapshot> docs = query.docs;

    //   Map<DateTime, List<dynamic>> events = {};
    //   docs.forEach((doc) {
    //     final checkIn = doc['logged_in'] as Timestamp?;
    //     final checkOut = doc['logged_out'] as Timestamp?;
    //     if (checkIn != null) {
    //       DateTime checkInDate = checkIn.toDate();
    //       events[DateTime(
    //           checkInDate.year, checkInDate.month, checkInDate.day)] = [doc];
    //     }
    //     if (checkOut != null) {
    //       DateTime checkOutDate = checkOut.toDate();
    //       events[DateTime(
    //           checkOutDate.year, checkOutDate.month, checkOutDate.day)] = [doc];
    //     }
    //   });

    //   setState(() {
    //     _events = events;
    //   });
    // }

    Future<void> _fetchEvents() async {
      // final userId = _auth.currentUser!.uid;
      // final QuerySnapshot query = await _firestore
      //     .collection('logs')
      //     .where('user_id', isEqualTo: userId)
      //     .get();
      // final List<DocumentSnapshot> docs = query.docs;

      // Map<DateTime, List<dynamic>> events = {};
      // docs.forEach((doc) {
      //   final checkIn = doc['logged_in'] as Timestamp?;
      //   final checkOut = doc['logged_out'] as Timestamp?;
      //   if (checkIn != null) {
      //     DateTime checkInDate = checkIn.toDate();
      //     events[DateTime(
      //         checkInDate.year, checkInDate.month, checkInDate.day)] = [doc];
      //   }
      //   if (checkOut != null) {
      //     DateTime checkOutDate = checkOut.toDate();
      //     events[DateTime(
      //         checkOutDate.year, checkOutDate.month, checkOutDate.day)] = [doc];
      //   }
      // });

      // setState(() {
      //   _events = events;
      // });

      final QuerySnapshot query = await _firestore.collection('logs').get();
      final List<DocumentSnapshot> docs = query.docs;

      Map<DateTime, List<dynamic>> events = {};
      docs.forEach((doc) {
        final userId = doc['user_id'] as String;
        final checkIn = doc['logged_in'] as Timestamp?;
        final checkOut = doc['logged_out'] as Timestamp?;

        if (checkIn != null) {
          DateTime checkInDate = checkIn.toDate();
          events[DateTime(
              checkInDate.year, checkInDate.month, checkInDate.day)] ??= [];
          events[DateTime(
                  checkInDate.year, checkInDate.month, checkInDate.day)]!
              .add({'type': 'Check In', 'userId': userId});
        }
        if (checkOut != null) {
          DateTime checkOutDate = checkOut.toDate();
          events[DateTime(
              checkOutDate.year, checkOutDate.month, checkOutDate.day)] ??= [];
          events[DateTime(
                  checkOutDate.year, checkOutDate.month, checkOutDate.day)]!
              .add({'type': 'Check Out', 'userId': userId});
        }
      });

      setState(() {
        _events = events;
      });
    }

    @override
    void initState() {
      super.initState();
      _fetchEvents();
    }

    Future<void> _checkIn() async {
      final userId = _auth.currentUser!.uid;
      final checkInTime = DateTime.now();
      await _firestore.collection('logs').add({
        'user_id': userId,
        'logged_in': checkInTime,
        'logged_out': null,
      });
      _fetchEvents();
    }

    Future<void> _checkOut() async {
      final userId = _auth.currentUser!.uid;
      final checkOutTime = DateTime.now();
      final QuerySnapshot query = await _firestore
          .collection('logs')
          .where('user_id', isEqualTo: userId)
          .get();
      final List<DocumentSnapshot> docs = query.docs;

      if (docs.isNotEmpty) {
        final docId = docs.first.id;
        await _firestore.collection('logs').doc(docId).update({
          'logged_out': checkOutTime,
        });
        _fetchEvents();
      }
    }

    List<dynamic> _fetchEventsx(DateTime date) {
      final events = _events[date] ?? [];
      return events;
    }
    //end try

    // Future<void> nah() async {
    //   final log = await FirebaseFirestore.instance
    //       .collection('logs')
    //       .where('user_id', isEqualTo: FirebaseAuth.instance.currentUser!.uid)
    //       .get();
    // }

    late final id;
    bool isLoggedin = false;

    String adminCode = 'gUNVDWvWjNfoHvd1lobnN8If5LP2';

    void loggedIn() async {
      final userId = _auth.currentUser!.uid;
      final checkInTime = DateTime.now();
      await _firestore.collection('logs').add({
        'user_id': userId,
        'logged_in': checkInTime,
        'logged_out': null,
      });
      _fetchEvents();

      // final qr = await FlutterBarcodeScanner.scanBarcode(
      //     '#ffffff', 'Cancel', true, ScanMode.DEFAULT);

      // if (qr == -1) {
      //   QuickAlert.show(
      //       context: context,
      //       type: QuickAlertType.error,
      //       title: 'Qr Code Error',
      //       text: 'Failed to Detect Qr Code.');
      // } else if (qr != adminCode) {
      //   QuickAlert.show(
      //       context: context,
      //       type: QuickAlertType.error,
      //       title: 'Unknown Qr Code',
      //       text: 'The Qr Code does not match for Strong tower Qr Code.');
      // } else if (qr == adminCode) {
      //   FirebaseFirestore.instance.collection('logs').add({
      //     'user_id': FirebaseAuth.instance.currentUser!.uid,
      //     'logged_in': DateTime.now(),
      //     'logged_out': ''
      //   }).then((value) {
      //     id = value.id;
      //     //      print(id);
      //   });
      // }

      try {} catch (error) {
        print('error');
      }
    }

    void loggedOut() async {
      //  print(id);
      // final qr = await FlutterBarcodeScanner.scanBarcode(
      //     '#ffffff', 'Cancel', true, ScanMode.DEFAULT);

      //       if (qr == -1) {
      //   QuickAlert.show(
      //       context: context,
      //       type: QuickAlertType.error,
      //       title: 'Qr Code Error',
      //       text: 'Failed to Detect Qr Code.');
      // } else if (qr != adminCode) {
      //   QuickAlert.show(
      //       context: context,
      //       type: QuickAlertType.error,
      //       title: 'Unknown Qr Code',
      //       text: 'The Qr Code does not match for Strong tower Qr Code.');
      // } else if (qr == adminCode) {
      //   FirebaseFirestore.instance
      //       .collection('logs')
      //       .doc(FirebaseAuth.instance.currentUser!.uid)
      //       .collection('logs_user')

      // }

      final userId = _auth.currentUser!.uid;
      final checkOutTime = DateTime.now();
      final QuerySnapshot query = await _firestore
          .collection('logs')
          .where('user_id', isEqualTo: userId)
          .get();
      final List<DocumentSnapshot> docs = query.docs;

      if (docs.isNotEmpty) {
        final docId = docs.first.id;
        await _firestore.collection('logs').doc(docId).update({
          'logged_out': checkOutTime,
        });
        _fetchEvents();
      }
    }

    return Scaffold(
      appBar: AppBar(
        title: const Text('Logs Date'),
      ),
      //  body: ,
      body: Column(children: [
        TableCalendar(
          calendarFormat: _calendarFormat,
          focusedDay: _focusedDay,
          firstDay: DateTime.utc(2021, 1, 1),
          lastDay: DateTime.utc(2030, 12, 31),
          eventLoader: _fetchEventsx,
          calendarStyle: CalendarStyle(
            todayDecoration: BoxDecoration(
              color: Colors.blue.withOpacity(0.2),
            ),
            selectedDecoration: BoxDecoration(
              color: Colors.blue,
            ),
          ),
          headerStyle: HeaderStyle(
            formatButtonVisible: false,
          ),
          onFormatChanged: (format) {
            setState(() {
              _calendarFormat = format;
            });
          },
          onPageChanged: (focusedDay) {
            _focusedDay = focusedDay;
          },
          selectedDayPredicate: (day) {
            return isSameDay(_selectedDay, day);
          },
          onDaySelected: (selectedDay, focusedDay) {
            setState(() {
              _selectedDay = selectedDay;
            });
          },
        ),
        Gap(10),
        ElevatedButton(onPressed: loggedIn, child: const Text('Logged In')),
        ElevatedButton(onPressed: loggedOut, child: const Text('Logged out')),
        // Expanded(
        //   child:
      ]),

      // body: StreamBuilder(
      //   stream: FirebaseFirestore.instance
      //       .collection('logs')
      //       .where('user_id', isEqualTo: FirebaseAuth.instance.currentUser!.uid)
      //       .snapshots(),
      //   builder: (context, snapshot) {
      //     if (snapshot.connectionState == ConnectionState.waiting) {
      //       return Center(
      //         child: CircularProgressIndicator(),
      //       );
      //     }

      //     final document = snapshot.data!.docs;
      //     return ListView.builder(
      //       itemCount: document.length,
      //       itemBuilder: (context, index) {
      //         return ListTile(
      //           title: Text('${document[index]['logged_in']}'),
      //         );
      //       },
      //     );
      //   },
    );
    //);
    //     ],
    //   ),
    // );
  }
}
